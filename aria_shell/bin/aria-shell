#!/usr/bin/env python3
import os
import sys
import argparse
import socket
from pathlib import Path

try:
    from aria_shell import __version__
except ModuleNotFoundError:
    # IN-SOURCE MODE: automatically add sources dir to sys.path
    pkg_path = Path(__file__).resolve().parent.parent.parent
    if (pkg_path / 'aria_shell').is_dir():
        sys.path.append(pkg_path.as_posix())
        from aria_shell import __version__
    else:
        print('Cannot find the aria_shell package, is aria_shell installed?')
        sys.exit(1)

from aria_shell.ariashell import AriaShell
from aria_shell.utils.logger import setup_logger


NAME = 'aria-shell'

DESCRIPTION = f"""
Start the aria shell, with optional config and css file.
  aria-shell [-c /path/to/config] [-s /path/to/css]

Or send a command to a running aria shell.
  aria-shell show launcher
"""

EPILOG = """
See the project wiki for the list of available commands.
See python logging module docs for available log formats.
"""


def main() -> int:
    parser = argparse.ArgumentParser(
        prog=NAME, description=DESCRIPTION, epilog=EPILOG,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '-c', '--config', type=Path, metavar='PATH',
        help='config file path',
    )
    parser.add_argument(
        '-s', '--style', type=Path, metavar='PATH',
        help='css style file path',
    )
    parser.add_argument(
        '-v', '--version', action='store_true',
        help='show version and exit',
    )
    parser.add_argument(
        '-l', '--log-level', default='warning',
        choices=['debug', 'info', 'warning', 'error', 'critical'],
        help='set log verbosity',
    )
    parser.add_argument(
        '--log-format', default='{relativeCreated:.2f} {levelname} {message}',
        help='set the log format',
    )
    parser.add_argument(
        '--log-file', type=Path, metavar='PATH',
        help='write log to file',
    )
    parser.add_argument(
        'command', nargs='*',
        help='Command to send to a running aria shell',
    )
    args = parser.parse_args()

    logger = setup_logger(args.log_level, args.log_format, args.log_file)

    if args.version:
        print('AriaShell', __version__)
        return 0

    if args.config and not args.config.is_file():
        logger.error(f'Cannot find config file: {args.config}')
        return 2

    if args.style and not args.style.is_file():
        logger.error(f'Cannot find css style file: {args.style}')
        return 3

    # send a command to a running shell
    if args.command:
        ok = send_command(' '.join(args.command))
        return 0 if ok else 4

    # or start a new shell
    return AriaShell(args).start()


def send_command(cmd: str) -> bool:
    """ Send the command to the aria socket and print the replay """
    # check the aria socket exists
    xdg_runtime_dir = os.getenv('XDG_RUNTIME_DIR') or f'/run/user/{os.getuid()}'
    socket_path = f'{xdg_runtime_dir}/aria-shell/cmd.sock'
    if not os.path.exists(socket_path):
        print(f'ERR: Cannot find aria socket: {socket_path}')
        return False

    # connect to the socket and send the command
    try:
        client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        client.connect(socket_path)
        client.sendall(cmd.encode() + b'\n')
    except Exception as ex:
        print(f'Cannot write to aria socket: {ex}')
        return False

    # read and print the response
    try:
        if response := client.recv(1024 * 1024):
            print(response.decode().rstrip('\n'))
    except Exception as ex:
        print(f'Error reading from the aria socket: {ex}')
        return False

    # close the socket and return ok
    client.close()
    return True


if __name__ == '__main__':
    sys.exit(main())
